{
  "language": "Solidity",
  "sources": {
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\n//import agregator feeds\n\nimport \"./PriceConverter.sol\";\n\nerror NotOwner();\n\ncontract FundMe {\n\n    using PriceConverter for uint256;\n\n        /**\n     * Network: Goerli\n     * Aggregator: ETH/USD\n     * Address: 0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\n     */\n\n    // keyword constant helps reduce gas, it is cheaper to read from it\n\n    uint256 public constant MINIMUM_AMOUNT = 50 * 1e18;\n\n    address[] public funders;\n    mapping(address => uint256) AddressToFundersAmount;\n\n    // immutable keywords helps reduce gas since we only set the value once, using immutable is cost effective\n    // const and immutable are saved directly into the byte code not the storage  \n    // they can only be declared once throughout the entire contracts\n    address public immutable i_owner;\n\n    AggregatorV3Interface public priceFeed;\n\n    constructor(address priceFeedAddress) {\n        i_owner = msg.sender;\n        priceFeed = AggregatorV3Interface(priceFeedAddress); \n    }\n\n    //keyword or syntax payable indicate that the function is payable,I.e can send fund out\n    function fund () public payable {\n        // want to be able to send minimum fund in USD\n        // How do we send fund Eth into this contract\n        // require is like if statement that checks if a statement is true;\n        // 1e18 = 1 * 10^18= 1000000000000000000\n        require(msg.value.getConvertionRate(priceFeed) >= MINIMUM_AMOUNT, \"Error: Didn't send fund\");\n        AddressToFundersAmount[msg.sender] = msg.value;\n        funders.push(msg.sender);\n    }\n\n    function withdrawFund() public onlyOwner {\n        funders = new address[](0);\n        (bool callSuccess, ) = payable(msg.sender).call{value: address(this).balance}(\"\");\n        require(callSuccess, \"call failed\");\n    }\n\n    modifier onlyOwner {\n        // _; this mean run all the code in withdrawFund first before running onlyOwner\n        // require(msg.sender == i_owner, \"Can't withdraw funds\");\n        if(msg.sender != i_owner){ revert NotOwner();}\n        _; // this line mean run the code in onlyOwner before running the code in withdrawFund  \n    }\n\n    receive () external  payable {\n        fund();\n    }\n\n    fallback () external payable {\n     fund();   \n    }\n\n}"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\nlibrary PriceConverter {\n    function getPrice(AggregatorV3Interface priceFeed) internal view returns (uint256){\n        // Address: 0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\n        // AggregatorV3Interface priceFeed = AggregatorV3Interface(0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e); \n        (, int256 price, , ,) = priceFeed.latestRoundData();\n        return uint256(price * 1e10); // 1 * 10 == 100000000\n    }\n \n    function getConvertionRate(uint256 ethAmount, AggregatorV3Interface priceFeed) internal view returns (uint256) {\n        uint256 ethPrice = getPrice(priceFeed);\n        // 1eth will return 3000_000000000000000000\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 10e18;\n        return ethAmountInUsd;\n    }\n} "
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}