{
  "language": "Solidity",
  "sources": {
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport \"./PriceConverter.sol\";\n\nerror FundMe__NotOwner();\n\n/**\n * @title A contract for crowd funding\n * @author Ayomide \n * @notice This contract is to demo a  sample funding contract\n * @dev This implement price feeds  as our library\n */\n\ncontract FundMe {\n\n    // Type Declaration\n    using PriceConverter for uint256;\n\n    // State variables \n    uint256 public constant MINIMUM_AMOUNT = 50 * 1e18;\n    address[] private s_funders;\n    mapping(address => uint256) private s_addressToFundersAmount;\n    address private immutable i_owner;\n    AggregatorV3Interface private s_priceFeed;\n\n    // Modifiers\n    modifier onlyOwner {\n        if(msg.sender != i_owner){ revert FundMe__NotOwner();}\n        _; //\n    }\n\n    // Functions format\n    /**\n     * constructor\n     * recieve\n     * fallback\n     * external\n     * public\n     * internal\n     * private\n     * view / pure\n     */\n\n\n    constructor(address priceFeedAddress) {\n        i_owner = msg.sender;\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress); \n    }\n\n    receive () external  payable {\n        fund();\n    }\n\n    fallback () external payable {\n        fund();   \n    }\n\n    /**\n     * @notice This functions is use to fund the contract/address\n     * @dev This implement price feeds  as our library\n    */\n\n    function fund () public payable {\n        require(msg.value.getConvertionRate(s_priceFeed) >= MINIMUM_AMOUNT, \"Error: Didn't send fund\");\n        s_addressToFundersAmount[msg.sender] = msg.value;\n        s_funders.push(msg.sender);\n    }\n\n    function withdrawFund() public payable onlyOwner {\n        for(uint256 funderIndex = 0; funderIndex < s_funders.length; funderIndex++){\n            address funder = s_funders[funderIndex];\n            s_addressToFundersAmount[funder] = 0;\n        }\n        s_funders = new address[](0);\n        (bool callSuccess, ) = payable(msg.sender).call{value: address(this).balance}(\"\");\n        require(callSuccess, \"call failed\");\n    }\n\n    // this is cheaper, saving into memory first makes it cheaper so we can easi ly loop through without visiting storage\n    function cheaperWithrawFund() public payable onlyOwner {\n        address[] memory funders = s_funders;\n        // mapping can't be stored in memory\n\n        for(uint256 funderIndex = 0; funderIndex < funders.length; funderIndex++){\n            address funder = funders[funderIndex];\n            s_addressToFundersAmount[funder] = 0;\n        }\n        s_funders = new address[](0);\n        (bool callSuccess, ) = payable(msg.sender).call{value: address(this).balance}(\"\");\n        require(callSuccess, \"call failed\");\n    }\n\n    // pure / view \n\n    function getOwner() public view returns (address) {\n        return i_owner;\n    } \n\n    function getFunders(uint256 index) public view returns (address){\n        return s_funders[index]; \n    }\n\n    function getAddressToFundersAmount(address funder) public view returns (uint256){\n         return s_addressToFundersAmount[funder];\n    }\n\n    function getPriceFeed() public view returns (AggregatorV3Interface){\n        return s_priceFeed ; \n    }\n\n\n\n}"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\nlibrary PriceConverter {\n    function getPrice(AggregatorV3Interface priceFeed) internal view returns (uint256){\n        // Address: 0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\n        // AggregatorV3Interface priceFeed = AggregatorV3Interface(0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e); \n        (, int256 price, , ,) = priceFeed.latestRoundData();\n        return uint256(price * 1e10); // 1 * 10 == 100000000\n    }\n \n    function getConvertionRate(uint256 ethAmount, AggregatorV3Interface priceFeed) internal view returns (uint256) {\n        uint256 ethPrice = getPrice(priceFeed);\n        // 1eth will return 3000_000000000000000000\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 10e18;\n        return ethAmountInUsd;\n    }\n} "
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}